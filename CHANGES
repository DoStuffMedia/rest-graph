= rest-graph changes history

== rest-graph 1.3.0 -- ?
* Added RestGraph#exchange_sessions to exchange old sessions to access tokens.

* Added RestGraph#old_rest, see:
  http://developers.facebook.com/docs/reference/rest/

* Now all API request accept an additional options argument,
  you may pass :suppress_decode => true to turn off auto-decode this time.
  e.g. rg.get('bad/json', {:query => 'string'}, :suppress_decode => true)
  This is for Facebook who didn't always return JSON in response.

* Big and fat refactoring in RailsUtil, see example for detail:
  http://github.com/cardinalblue/rest-graph/tree/bb11250e377736c6425666587906a66644c9415e/example

== rest-graph 1.2.1 -- 2010-06-02
* Deprecated RailsController, use RailsUtil instead.
* Fixed a bug that passing access_token in query string
  in RestGraph#authorize_url
* Fixed a bug that Facebook changed the format (I think) of fbs_ in cookies.
  Thanks betelgeuse, closes #1
  http://github.com/cardinalblue/rest-graph/issues/issue/1

== rest-graph 1.2.0 -- 2010-05-27
* Add RestGraph#parse_json!
* Add RailsController to help you integrate into Rails.
* Simplify arguments checking and require dependency.
* Now if there's no secret in RestGraph, sig check would always fail.
* Now there's a Rails example.
  http://github.com/cardinalblue/rest-graph/tree/master/example

* Add error_handler option. Default behavior is raising ::RestGraph::Error.
  You may want to pass your private controller method to do redirection.
  Extracted from README:
  # You may want to do redirect instead of raising exception, for example,
  # in a Rails application, you might have this private controller method:
  def redirect_to_authorize error = nil
    redirect_to @rg.authorize_url(:redirect_uri => request.url)
  end

  # and you'll use that private method to do error handling:
  def setup_rest_graph
    @rg = RestGraph.new(:error_handler => method(:redirect_to_authorize))
  end

* Add log_handler option. Default behavior is do nothing.
  You may want to do this in Rails:
  RestGraph.new(:log_hanlder => lambda{ |duration, url|
                                  Rails.logger.debug("RestGraph "         \
                                                     "spent #{duration} " \
                                                     "requesting #{url}")
                                })

* Add RestGraph#fql_multi to do FQL multiquery. Thanks Ethan Czahor
  Usage: rg.fql_multi(:query1 => 'SELECT ...', :query2 => 'SELECT ...')

== rest-graph 1.1.1 -- 2010-05-21
* Add oauth realted utilites -- authorize_url and authorize!
* Fixed a bug that in Ruby 1.8.7-, nil =~ /regexp/ equals to false.
  It is nil as expected in Ruby 1.9.1+

== rest-graph 1.1.0 -- 2010-05-13
* Main repository was moved to http://github.com/cardinalblue/rest-graph
  Sorry for the inconvenience. I'll keep pushing to both repositories until
  I am too lazy to do that.

* Better way to deal with default attributes, use class methods.

* If you want to auto load config, do require 'rest-graph/auto_load'
  if it's rails, it would load the config from config/rest-graph.y(a)ml.
  if you're using rails plugin, we do require 'rest-graph/auto_load'
  for you.

* Config could be loaded manually as well. require 'rest-graph/load_config'
  and RestGraph::LoadConfig.load_config!('path/to/rest-graph.yaml', 'env')

== rest-graph 1.0.0 -- 2010-05-06
* now access_token is saved in data attributes.
* cookies related methods got renamed, and saved all data in RestGraph
* parse failed would return nil, while data is always a hash

== rest-graph 0.9.0 -- 2010-05-04
* renamed :server option to :graph_server
* added :fql_server option and fql support.
* cookies related parsing utility is now instance methods.
  you'll need to pass app_id and secret when initializing
* if sig in cookies is bad, then it won't extract the access_token

== rest-graph 0.8.1 -- 2010-05-03
* added access_token parsing utility

== rest-graph 0.8.0 -- 2010-05-03
* release early, release often
